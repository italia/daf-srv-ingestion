{
  "name": "ingestion",
  "description": "ingestion workflow",
  "version": 1,
  "tasks": [
    {
      "name": "check-folder-wf-task",
      "taskReferenceName": "check-folder-wf",
      "inputParameters": {
        "checkInput": "${workflow.input.ingestionInput}"
      },
      "type": "SUB_WORKFLOW",
      "subWorkflowParam": {
        "name": "check-folder",
        "version": 1
      }
    },
    {
      "name": "spark-job-launch",
      "taskReferenceName": "spark-job-launch",
      "inputParameters": {
        "input_spark_task": {
			"code": [
                    "import it.gov.daf.ingestion.hadoop.{CsvChars, SparkOperations}",
                    "val file = \"\"\"${workflow.input.ingestionInput.file}\"\"\"",
                    "val isCsv=${workflow.input.ingestionInput.isCsv}",
                    "val phUri = \"\"\"${workflow.input.ingestionInput.datasetPath}${workflow.input.ingestionInput.datasetName}\"\"\"",
                    "val csvChars = CsvChars( \"\"\"${workflow.input.ingestionInput.csvChars.quote}\"\"\", \"\"\"${workflow.input.ingestionInput.csvChars.delimiter}\"\"\", \"\"\"${workflow.input.ingestionInput.csvChars.escape}\"\"\" )",
                    "SparkOperations.callValidateIngestedFile(Some(schema), file, isCsv, Some(csvChars), phUri)(spark)"
            ],
            "authHeader": {
                "name":"${workflow.input.ingestionInput.authHeader.name}",
                "authType": "${workflow.input.ingestionInput.authHeader.authType}",
                "token":"${workflow.input.ingestionInput.authHeader.token}"
            }

	    }
      },
      "type": "SIMPLE"
    },
    {
      "name": "call-service",
      "taskReferenceName": "refresh-table",
      "inputParameters": {
        "http_request": {
          "uri": "${workflow.input.ingestionInput.env.sec-man-url}/impala/refreshTable?schemaName=${workflow.input.ingestionInput.dbName}&tableName=${workflow.input.ingestionInput.tableName}",
          "method": "PUT",
          "body": {},
          "headers":{
            "Authorization": "${workflow.input.ingestionInput.authHeader.authType} ${workflow.input.ingestionInput.authHeader.token}"
          }
        }
      },
      "type": "HTTP"
    },

    {
      "name": "invalids-initialization-wf-task",
      "taskReferenceName": "invalids-initialization-wf",
      "inputParameters": {
        "invalidsInput": "${workflow.input.ingestionInput}",
        "init":"${check-folder-wf.output}"
      },
      "type": "SUB_WORKFLOW",
      "subWorkflowParam": {
        "name": "invalids-initialization",
        "version": 1
      }
    },


    {
      "name": "decide-task",
      "taskReferenceName": "decide1",
      "inputParameters": {
        "case_value_param1": "${check-folder-wf.output.check-invalids-firstStage-folder}",
        "case_value_param2": "${invalids-initialization-wf.output.check-invalids-firstStage-folder}"
      },
      "type": "DECISION",
      "caseExpression": "($.case_value_param1 !== null && $.case_value_param2 !== null) ? 'OK' : 'KO'",
      "defaultCase":[],
      "decisionCases": {
        "OK": [
          {
            "name": "call-service",
            "taskReferenceName": "refresh-invalid1-table",
            "inputParameters": {
              "http_request": {
                "uri": "${workflow.input.ingestionInput.env.sec-man-url}/impala/refreshTable?schemaName=${workflow.input.ingestionInput.dbName}&tableName=${workflow.input.ingestionInput.tableName}_invalids_1s",
                "method": "PUT",
                "body": {},
                "headers":{
                  "Authorization": "${workflow.input.ingestionInput.authHeader.authType} ${workflow.input.ingestionInput.authHeader.token}"
                }
              }
            },
            "type": "HTTP"
          }

        ]
      }
    },

    {
      "name": "decide-task",
      "taskReferenceName": "decide2",
      "inputParameters": {
        "case_value_param1": "${check-folder-wf.output.check-invalids-secondStage-folder}",
        "case_value_param2": "${invalids-initialization-wf.output.check-invalids-secondStage-folder}"
      },
      "type": "DECISION",
      "caseExpression": "($.case_value_param1 !== null && $.case_value_param2 !== null) ? 'OK' : 'KO'",
      "decisionCases": {
        "OK": [

          {
            "name": "call-service",
            "taskReferenceName": "refresh-invalid2-table",
            "inputParameters": {
              "http_request": {
                "uri": "${workflow.input.ingestionInput.env.sec-man-url}/impala/refreshTable?schemaName=${workflow.input.ingestionInput.dbName}&tableName=${workflow.input.ingestionInput.tableName}_invalids_2s",
                "method": "PUT",
                "body": {},
                "headers":{
                  "Authorization": "${workflow.input.ingestionInput.authHeader.authType} ${workflow.input.ingestionInput.authHeader.token}"
                }
              }
            },
            "type": "HTTP"
          }

        ]
      }
    },


    {
      "name": "call-service",
      "taskReferenceName": "move-uploaded-file",
      "inputParameters": {
        "http_request": {
          "uri": "${workflow.input.ingestionInput.env.sec-man-url}/hdfs/proxy${workflow.input.ingestionInput.file}?op=RENAME&destination=${workflow.input.ingestionInput.archivePath}${workflow.input.ingestionInput.datasetName}-${spark-job-launch.workflowInstanceId}",
          "method": "PUT",
          "headers":{
            "Authorization": "${workflow.input.ingestionInput.authHeader.authType} ${workflow.input.ingestionInput.authHeader.token}"
          }
        }
      },
      "type": "HTTP"
    }
  ],
  "outputParameters": {
    "status": "${spark-job-launch.output.result}"
  },
  "schemaVersion": 2
}